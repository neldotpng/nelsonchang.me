{"ast":null,"code":"var isMobileDevice = function isMobileDevice() {\n  return typeof window.orientation !== \"undefined\" || navigator.userAgent.indexOf('IEMobile') !== -1;\n};\n\nvar isSafari = function isSafari() {\n  return /constructor/i.test(window.HTMLElement) || function (p) {\n    return p.toString() === \"[object SafariRemoteNotification]\";\n  }(!window['safari'] || typeof window['safari'] !== 'undefined' && window['safari'].pushNotification);\n};\n\nvar isFirefox = function isFirefox() {\n  return typeof InstallTrigger !== 'undefined';\n};\n\nvar isChrome = function isChrome() {\n  return !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\n};\n\nexport { isMobileDevice, isSafari, isFirefox, isChrome };","map":{"version":3,"sources":["/Users/Nelson/GitHub/nelsonchang.me/src/functions/browser-detect.js"],"names":["isMobileDevice","window","orientation","navigator","userAgent","indexOf","isSafari","test","HTMLElement","p","toString","pushNotification","isFirefox","InstallTrigger","isChrome","chrome","webstore","runtime"],"mappings":"AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,SAAQ,OAAOC,MAAM,CAACC,WAAd,KAA8B,WAA/B,IAAgDC,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,UAA5B,MAA4C,CAAC,CAApG;AACD,CAFD;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,SAAO,eAAeC,IAAf,CAAoBN,MAAM,CAACO,WAA3B,KAA4C,UAAUC,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACC,QAAF,OAAiB,mCAAxB;AAA8D,GAA9E,CAAgF,CAACT,MAAM,CAAC,QAAD,CAAP,IAAsB,OAAOA,MAAM,CAAC,QAAD,CAAb,KAA4B,WAA5B,IAA2CA,MAAM,CAAC,QAAD,CAAN,CAAiBU,gBAAlK,CAAlD;AACD,CAFD;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,SAAO,OAAOC,cAAP,KAA0B,WAAjC;AACD,CAFD;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,SAAO,CAAC,CAACb,MAAM,CAACc,MAAT,KAAoB,CAAC,CAACd,MAAM,CAACc,MAAP,CAAcC,QAAhB,IAA4B,CAAC,CAACf,MAAM,CAACc,MAAP,CAAcE,OAAhE,CAAP;AACD,CAFD;;AAIA,SAASjB,cAAT,EAAyBM,QAAzB,EAAmCM,SAAnC,EAA8CE,QAA9C","sourcesContent":["const isMobileDevice = () => {\n  return (typeof window.orientation !== \"undefined\") || (navigator.userAgent.indexOf('IEMobile') !== -1);\n};\n\nconst isSafari = () => {\n  return /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || (typeof window['safari'] !== 'undefined' && window['safari'].pushNotification));\n};\n\nconst isFirefox = () => {\n  return typeof InstallTrigger !== 'undefined';\n};\n\nconst isChrome = () => {\n  return !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\n};\n\nexport { isMobileDevice, isSafari, isFirefox, isChrome };\n"]},"metadata":{},"sourceType":"module"}